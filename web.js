// Generated by CoffeeScript 1.10.0
(function() {
  var co, coRedis, commatize, createRedisClient, csv, dictify, koa, os, port, redis, ref, route, start, survey, util;

  os = require('os');

  util = require('util');

  koa = require('koa');

  route = require('koa-route');

  co = require('co');

  redis = require('redis');

  coRedis = require('co-redis');

  csv = require('fast-csv');

  survey = require('./twitter');

  port = (ref = process.env.PORT) != null ? ref : 3002;

  createRedisClient = function() {
    return coRedis(redis.createClient(process.env.REDIS_URL));
  };

  dictify = function(a) {
    var d, i, j, len, v;
    d = {};
    for (i = j = 0, len = a.length; j < len; i = ++j) {
      v = a[i];
      if (i % 2 === 1) {
        d[a[i - 1]] = v;
      }
    }
    return d;
  };

  commatize = function(n) {
    var fraction, fractionIndex;
    fractionIndex = (n || 0).toString().lastIndexOf('.');
    fraction = '';
    if (fractionIndex > -1) {
      fraction = n.toString().substr(fractionIndex);
    }
    if (n >= 1000) {
      return commatize(Math.floor(n / 1000)) + ',' + Math.floor(n).toString().substr(-3) + fraction;
    } else {
      return n;
    }
  };

  start = function() {
    var app, surveyer;
    surveyer = new survey.Surveyer();
    app = koa();
    app.use(route.get('/', function*(next) {
      var stats;
      stats = (yield surveyer.stats());
      return this.body = "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Twitter Influencer Survey</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/mohsen1/json-formatter-js/master/dist/style.css\" />\n    <style>\n      body {font-family: Sans-Serif;}\n      th, td {text-align: right; padding: 0.5em;}\n      th:first-child {text-align: left;}\n      table {border-collapse: collapse;}\n      table, td, th {border: 1px solid black;}\n      th.trivia, td.trivia {border: 1px solid #eee; color:#eee;}\n      th.trivia *, td.trivia * {color:#eee;}\n      .explain {font-size: x-small; color:#ccc;}\n    </style>\n  </head>\n  <body>\n    <h2>Statistics</h2>\n\n    <table>\n      <tr>\n        <th></th>\n        <th>processed</th>\n        <th>unique discovered</th>\n        <th>\n          queue\n          <div class=\"explain\">Backlog</div>\n        </th>\n        <th class=\"trivia\">\n          discarded\n          <div class=\"explain\">Memory pressure</div>\n        </th>\n      </tr>\n\n      <tr>\n        <th>Users\n          <div class=\"explain\">\n            Twitter users\n          </div>\n        </th>\n        <td>" + (commatize(stats.user.popped || 0)) + "</td>\n        <td>" + (stats.user.discarded ? "&ge;&nbsp;" : "") + (commatize(stats.user.pushed || 0)) + "</td>\n        <td rowspan=2>" + (stats.user.discarded ? "&ge;&nbsp;" : "") + (commatize(stats.user.queue || 0)) + "</td>\n        <td class=\"trivia\">" + (commatize(stats.user.discarded || 0)) + "</td>\n      </tr>\n\n      <tr>\n        <th>Influencers\n          <div class=\"explain\">\n            Twitter users with 5,000 followers or more\n          </div>\n          <div>\n            <a href=\"/influencers.csv\">download all</a> or\n            <a href=\"/influencers.csv?offset=0&count=5000\">top " + (commatize(Math.min(5000, stats.influencers))) + "</a>\n          </div>\n        </th>\n        <td colspan=2>" + (commatize(stats.influencers)) + "</td>\n        <td class=\"trivia\">0</td>\n      </tr>\n\n      <tr>\n        <th>Influencer Followers\n          <div class=\"explain\">\n            Influencers with followers<br/>\n            About to (slowly) fetch the first 5,000 followers\n          </div>\n        </th>\n        <td>" + (commatize(stats.followers.popped || 0)) + "</td>\n        <td>" + (stats.followers.discarded ? "&ge;&nbsp;" : "") + (commatize(stats.followers.pushed || 0)) + "</td>\n        <td>" + (stats.followers.discarded ? "&ge;&nbsp;" : "") + (commatize(stats.followers.queue || 0)) + "</td>\n        <td class=\"trivia\">" + (commatize(stats.followers.discarded || 0)) + "</td>\n      </tr>\n\n      <tr>\n        <th>Influencer Follower Friends\n          <div class=\"explain\">\n            Users that follow others<br/>\n            About to (slowly) fetch the first 5,000 users they follow\n          </div>\n        </th>\n        <td>" + (commatize(stats.friends.popped || 0)) + "</td>\n        <td>" + (stats.friends.discarded ? "&ge;&nbsp;" : "") + (commatize(stats.friends.pushed || 0)) + "</td>\n        <td>" + (stats.friends.discarded ? "&ge;&nbsp;" : "") + (commatize(stats.friends.queue || 0)) + "</td>\n        <td class=\"trivia\">" + (commatize(stats.friends.discarded || 0)) + "</td>\n      </tr>\n    </table>\n\n    <h2>Latest Influencer</h2>\n    <p>\n      <a href=\"https://twitter.com/" + stats.lastInfluencer.screen_name + "\">" + stats.lastInfluencer.name + "</a>\n    </p>\n    <script src=\"https://cdn.rawgit.com/mohsen1/json-formatter-js/master/dist/bundle.js\"></script>\n    <script>\n      var lastInfluencer = " + (JSON.stringify(stats.lastInfluencer)) + ";\n      var formatter = new JSONFormatter(lastInfluencer);\n      document.body.appendChild(formatter.render())\n    </script>\n  </body>\n</html>";
    }));
    app.use(route.get('/stats', function*(next) {
      return this.body = (yield surveyer.stats());
    }));
    app.use(route.get('/influencers.csv', function*(next) {
      var count, influencers, offset, redisClient, ref1, s;
      redisClient = createRedisClient();
      s = csv.createWriteStream();
      this.body = s;
      this.type = 'text/csv';
      this.attachment();
      ref1 = this.query, offset = ref1.offset, count = ref1.count;
      influencers = null;
      if ((offset != null) || (count != null)) {
        if (offset == null) {
          offset = 0;
        }
        if (count == null) {
          count = -1;
        }
        influencers = (yield redisClient.zrevrangebyscore('influence', '+inf', 5000, 'withscores', 'limit', offset, count));
        influencers = dictify(influencers);
      }
      s.write(['screen_name', 'followers_count', 'name', 'description', 'location', 'url', 'email_address']);
      return co(function*(cb) {
        var cursor, description, email_address, email_re, followers_count, influencer, influencersChunk, location, name, ref2, ref3, ref4, ref5, screen_name, url;
        email_re = /\S+@\S+\.\S+/;
        cursor = '0';
        while (true) {
          ref2 = (yield redisClient.hscan('influencers', cursor, 'COUNT', 1000)), cursor = ref2[0], influencersChunk = ref2[1];
          ref3 = dictify(influencersChunk);
          for (screen_name in ref3) {
            influencer = ref3[screen_name];
            ref4 = JSON.parse(influencer), name = ref4.name, followers_count = ref4.followers_count, description = ref4.description, location = ref4.location, url = ref4.url;
            if ((influencers != null) && !influencers[screen_name]) {
              continue;
            }
            description = description.replace(/\r/g, '\n');
            email_address = (ref5 = email_re.exec(description)) != null ? ref5[0] : void 0;
            s.write([screen_name, followers_count, name, description, location, url, email_address]);
          }
          if (cursor === '0') {
            break;
          }
        }
        s.end();
        redisClient.quit();
        return typeof cb === "function" ? cb() : void 0;
      })["catch"](function(err) {
        return console.error(err.stack);
      });
    }));
    app.use(route.get('/memory', function*(next) {
      this.body = process.memoryUsage();
      return;
    }));
    app.use(route.get('/loadavg', function*(next) {
      this.body = os.loadavg();
      return;
    }));
    return app.listen(port);
  };

  if (require.main === module) {
    co(start)["catch"](function(err) {
      return console.error(err.stack);
    });
  }

  module.exports = {
    start: start
  };

}).call(this);
